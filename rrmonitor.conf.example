#!/bin/bash
#
# @author Gerhard Steinbeis (info [at] tinned-software [dot] net)
# @copyright Copyright (c) 2014
# 
# @license http://opensource.org/licenses/GPL-3.0 GNU General Public License, version 3
# @package monitoring
#


# The host name to monitor. This hostname is resolved and each returned IP 
# address is checked individually.
HOST_NAME="host.example.com"
HOST_PORT="80"

# Set the url schema to be used when connecting to the server. When using 
# https:// this script will report a certificate missmatch as the connection is 
# explicitly made via IP address which is very likely not listed in the 
# certificate. To avoid it, add the "--insecure" option into the CURL_OPTIONS.
URL_SCHEMA="http://"

# define the DNS server to use. When you do not want to use the systems default 
# dns serers, you can specify them here. To use system defaut keep this empty.
HOST_DNS_SERVER=""

# The command used to resolve the hostname "host" does not utilize the 
# /etc/hosts file. This switch is added to switch between the "host" 
# command (using the $HOST_DNS_SERVER setting) and the "getent ahosts" command. 
# To use the /etc/hosts while resolfing the hostname set this to YES. When this 
# is set to YES, the $HOST_DNS_SERVER setting is not used.
UTILIZE_HOSTS="YES"

# Disable checking IPv6 addresses. This can be used if the monitoring host does 
# not have IPv6 connectivity to avoid false positives.
IGNORE_IP6="NO"

# The path/filename to retrieve from the server. This should at least contain 
# the "/" which is the default.
HOST_PATH="/"

# The search pattern for the returned content. Regular expression can be used.
SEARCH_PATTERN="<title>Page Title String</title>"

# Output format of the result. Possible values are "text" (default), "json" 
# and "terse". The terse format will output the "text" format but only if the 
# summary status is not OK. It will as well contain the content of the failed 
FORMAT="text"

# Define the logfile path. It is used to store the server response to. In case 
# of an OK check, the output file is deletect after the check is completed. A 
# not successfull check will remain where the file name will be of the 
# following format: <YYYY-MM-DD_hh-mm-ss>_NOK_<HOST_IP>.log
LOG_PATH="/var/log/rrmonitor/"

# The connect timeout in seconds for the connection attempt. This limit only 
# applies to the connect phase of the ckeck.
# The default connect timeoutr is set to 30 seconds.
CONNECT_TIMEOUT="30"

# Limiting the complete check to a maximum amount of seconds. This will limit 
# the complete time the operation is allowed to take. This includes the 
# connection phase.
# The default check timeout is set to 60 seconds.
CHECK_TIMEOUT="60"

# Set additional options for the curl command to retrieve the content of the 
# website. The possible options is available in the curl man page. The example 
# shows the -L option allowing curl to follow redirects.
CURL_OPTIONS="-L"

# This trigger-timeout defines the timeout after which the check is considered 
# failed. Even with the rest of the check beeing OK, if this time is exeeded, 
# the test is considered failed.
# The default check timeout is set to 30 seconds.
TRIGGER_TIMEOUT="30"


# Enable the notification via XMPP. This requires sendxmpp to be installed. For
# more details about sendxmpp see http://sendxmpp.platon.sk/
XMPP_NOTIFICATION="NO"

# The sending XMPP account credentials (username, password and XMPP server).
XMPP_SEND_USER="sender-username"
XMPP_SEND_PASS="user-password"
XMPP_SERVER="talk.google.com"

# Additional options for the sendxmpp command like "--tls" as required by gtalk.
XMPP_OPTIONS="--tls"

# The recipient username and domain.
XMPP_RCPT_USER="recipient-username"
XMPP_RCPT_DOMAIN="gmail.com"


# enable the storage of the monitor data into a RRDtool database. This  
# requires the RRDtool from http://oss.oetiker.ch/rrdtool/ to be installed.
RRDTOOL_ENABLE="NO"

# Define the path to the rrdtool executable. If not speficied, the rrdtool will 
# be called without path information. example /usr/bin/rrdtool
RRDTOOL_CMD=""

# RRDtool database path. In this directory the script will generate and store 
# RRDtool databases.
RRDTOOL_DBPATH="/var/lib/rrmonitor/db/"

# RRD database settings. Based on the interval of the monitor and the amount 
# of entries, the time stored in the db is defined. When the monitor runs every 
# 5 minutes and the graph should have one month worth of data (31 days) we need 
# 8928 entries in the database.
#
# Time between measurements (seconds)
RRDTOOL_STEP_TIME=300
# Heartbeat, the maximum time between measurements (seconds)
RRDTOOL_STEP_TIME_MISSING=600
# Number of entries to keep
RRDTOOL_ENTRIES=8928


# enable the generation of the graphs from the RRDtool database. This  
# requires the RRDtool from http://oss.oetiker.ch/rrdtool/ to be installed.
RRDTOOL_GRAPH_ENABLE="NO"

# The script will automatically regenerate the graph for the monitor. This 
# setting defines the directory to sore the generated graphs in.
RRDTOOL_GRAPH_PATH="/var/lib/rrmonitor/graph/"

# Settings for the grapth generation. This are directly the RRDtool parameter 
# used to generate the graph.

# timeframe for the graph (12 hours, 24 hours, 7 days, 31 days)
RRDTOOL_GRAPH_TIMEFRAME=(
	43200
	86400
	604800
	2678400
	)
# timeframe lable for the graph (12 hours, 24 hours, 7 days, 31 days)
RRDTOOL_GRAPH_TIMEFRAME_LABLE=(
	"12 hours"
	"24 hours"
	"7 days"
	"31 days"
	)

# Define colors for the graph lines. The specified colers should be as 
# much as IP addresses configured for the roud-robin DNS entry or more.
RRDTOOL_GRAPH_COLORS=(
	D53F00		# 	red
	5896FF		# 	blue
	53C623		# 	green
	999999		# 	grey
	E4901E		# 	orange
	)

# The size of the graph image generated.
RRDTOOL_GRAPH_HEIGHT=200
RRDTOOL_GRAPH_WIDTH=1000

